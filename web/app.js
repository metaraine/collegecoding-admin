// Generated by CoffeeScript 1.4.0
(function() {
  var app, async, config, db, express, model, mongoose, render, rjs, rollingSum;

  express = require('express');

  mongoose = require('mongoose');

  rjs = require('rjs').installPrototypes();

  async = require('async');

  config = require('./config').config;

  render = require('./controller-helper.js').render;

  app = express();

  app.set('view engine', 'jade');

  app.set('views', __dirname + '/views');

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.session({
    secret: config.sessionSecret
  }));

  app.use(express["static"](__dirname + '/public'));

  mongoose.connect('mongodb://localhost/ccadmin');

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  db.once('open', function() {
    return console.log('Successfully connected to db');
  });

  model = {
    clients: mongoose.model('Client', mongoose.Schema({
      _id: mongoose.Schema.ObjectId,
      name: String,
      clientType: String,
      clientStatus: String,
      leadStatus: String,
      created: Date,
      firstContact: Date,
      balance: Number,
      platform: String,
      timezone: String,
      referrer: String,
      city: String,
      state: String,
      email: String,
      phone: String,
      school: String,
      schoolProgram: String,
      schoolClass: String,
      notes: String,
      rate: String,
      payments: [
        {
          _id: mongoose.Schema.ObjectId,
          amount: Number,
          rate: Number,
          date: Date,
          notes: String
        }
      ],
      sessions: [
        {
          _id: mongoose.Schema.ObjectId,
          duration: Number,
          rate: Number,
          date: Date,
          notes: String
        }
      ]
    })),
    sessions: mongoose.model('Session', mongoose.Schema({
      _id: mongoose.Schema.ObjectId,
      duration: Number,
      name: String,
      rate: Number,
      date: Date,
      notes: String
    })),
    payments: mongoose.model('Payment', mongoose.Schema({
      _id: mongoose.Schema.ObjectId,
      amount: Number,
      name: String,
      rate: Number,
      date: Date,
      notes: String
    }))
  };

  rollingSum = function(xySeries, n) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = n, _ref = xySeries.length; n <= _ref ? _i <= _ref : _i >= _ref; i = n <= _ref ? ++_i : --_i) {
      _results.push(xySeries.slice(i - n, +i + 1 || 9e9).reduce(function(x, y) {
        return x + y;
      }));
    }
    return _results;
  };

  app.get('/', function(req, res) {
    return async.parallel({
      clients: function(callback) {
        return model.clients.find({
          clientType: 'client',
          clientStatus: 'active'
        }).sort('name').exec(callback);
      },
      sessions3Months: function(callback) {
        return model.sessions.find({
          date: {
            $gte: new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)
          }
        }).sort('date').exec(callback);
      }
    }, function(err, results) {
      var perDaySeries, perDayXY, perDayXY7DaySum;
      perDaySeries = rjs.orderedGroup(results.sessions3Months, 'date').map(function(dateGroup) {
        return {
          date: new Date(dateGroup.key).getTime(),
          value: dateGroup.items.length
        };
      });
      perDayXY = {
        x: perDaySeries.pluck('date'),
        y: perDaySeries.pluck('value')
      };
      perDayXY7DaySum = {
        x: perDayXY.x.slice(6),
        y: rollingSum(perDayXY.y, 7)
      };
      return render(req, res, {
        title: 'College Coding Admin',
        seed: {
          view: 'index',
          data: {
            perDayXY: perDayXY,
            perDayXY7DaySum: perDayXY7DaySum
          }
        }
      });
    });
  });

  app.get('/client/:name', function(req, res) {
    return model.clients.findOne({
      name: new RegExp('.*' + req.params.name + '.*', 'i')
    }).exec(function(err, client) {
      if (!client) {
        return render(req, res, {
          title: 'New Client: ' + req.params.name,
          seed: {
            view: 'newclient',
            data: {
              name: req.params.name
            }
          }
        });
      } else {
        return async.parallel({
          sessions: function(callback) {
            return model.sessions.find({
              name: client.name
            }).sort('date').exec(callback);
          },
          payments: function(callback) {
            return model.payments.find({
              name: client.name
            }).sort('date').exec(callback);
          }
        }, function(err, results) {
          client.sessions = results.sessions;
          client.payments = results.payments;
          return render(req, res, {
            title: client.name,
            seed: {
              view: 'client',
              data: client
            }
          });
        });
      }
    });
  });

  app.post('/client/:name', function(req, res) {
    return model.clients.update({
      name: new RegExp('.*' + req.params.name + '.*', 'i')
    }, req.body).exec(function(err, numberAffected, raw) {
      return res.send();
    });
  });

  app.post('/db/:collection', function(req, res) {
    var doc;
    if (!(req.params.collection in model)) {
      return res.send(500, req.params.collection + ' is not a valid collection');
    } else {
      doc = new model[req.params.collection](req.body);
      return doc.save(function() {
        return res.send();
      });
    }
  });

  app.listen(process.env.PORT, function() {
    return console.log('Listening on port ' + process.env.PORT);
  });

  exports.app = app;

}).call(this);
